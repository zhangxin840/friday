package{	//BAIDU:	//import com.baidu.app.as3api.APP;	import flash.display.DisplayObject;	import flash.display.GraphicsPath;	import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.geom.Point;	import flash.globalization.CollatorMode;	import flash.media.SoundChannel;	import flash.utils.*;	import flash.text.engine.TextBlock;	import flash.filters.DropShadowFilter;	import flash.filters.GlowFilter;	import flash.media.Sound;	import gs.TweenMax;	import gs.easing.*;		public class Friday extends MovieClip	{		private var step:int;		private var lifePoint:int;				private var fightingStack:Array;		private var agingStack:Array;		private var pirateStack:Array = new Array();		private var hazardStack:Array = new Array();		private var hazardDiscardStack:Array = new Array();		private var fightingDiscardStack:Array = new Array();		private var removedCards:Array = new Array();		private var pirates:Array = new Array();		private var drawnCards:Array = new Array();		private var hidedHandCards:Array = new Array();		private var sortCards:Array = new Array();		private var theTwoHazards:Array = new Array();		private var childrenToRemove:Array = new Array();		private var theDoubelFighitngValue:Array = new Array();		private var handCardsToActive:Array = new Array();				private var handBasePoint:Point;		private var hazardBasePoint:Point;		private var pirateBasePoint:Point;		private var hazardStackPoint:Point;		private var fightingStackPoint:Point;		private var discardBasePoint:Point;		private var doneButtonPoint:Point;		private var fightButtonPoint:Point;				private var currentHazard:HazardCard;		private var currentPirate:PirateCard;		private var otherPirate:PirateCard;		private var effectCard:FightingCard;		private var discardTop:Card;				private var freeCardsNum:int;		private var stopAtNum:int;		private var hazardValue:int;		private var valueDifference:int;		private var origionalDrawnNum:int;		private var selectableCardsNum:int;		private var gameLevel:int;		private var pirateDefeatedNum:int;		private var reducedTimes:int;				private var highestValueEqualZero:Boolean;		private var choosingCard:Boolean;		private var loseLastFighting:Boolean;		private var oneHazard:Boolean;		private var exchangedOneCard:Boolean;		private var newCardCostsTwo:Boolean;		private var eachCardAddOne:Boolean;		private var halfCardsCount:Boolean;		private var winTheGame:Boolean;		private var gameEnded:Boolean;		private var silence:Boolean;		private var discardSortCard:Boolean;				private var loseOneLife:Boolean;		private var loseTwoLife:Boolean;				private var theHurtEffect:MovieClip;		private var theRecoverEffect:MovieClip;		private var theStartScreen:MovieClip;		private var theGameOverScreen:MovieClip;				private var theBackgroundMusicChannel:SoundChannel;		private var theBackgroundMusic:Sound;		private var pausePoint:Number;		public function Friday()		{				gotoAndStop(1);							//BAIDU:			//APP.init(root);			theHurtEffect = new HurtEffect();			theHurtEffect.x = 410;			theHurtEffect.y = 300;			theHurtEffect.addFrameScript(theHurtEffect.totalFrames - 1, hurtPlayEnd);			theHurtEffect.gotoAndStop(1);						theRecoverEffect = new RecoverEffect();			theRecoverEffect.x = 410;			theRecoverEffect.y = 300;			theRecoverEffect.addFrameScript(theRecoverEffect.totalFrames - 1, recoverPlayEnd);			theRecoverEffect.gotoAndStop(1);						gameLevel = 1;						step = 0;			lifePoint = 20;			freeCardsNum = 0;			valueDifference = 0;			origionalDrawnNum = 0;			selectableCardsNum = 0;			pirateDefeatedNum = 0;			reducedTimes = 0;			stopAtNum = 0;						highestValueEqualZero = false;			choosingCard = false;			exchangedOneCard = false;			oneHazard = false;			loseLastFighting = false;			newCardCostsTwo = false;			eachCardAddOne = false;			halfCardsCount = false;			winTheGame = false;			gameEnded = false;			discardSortCard = false;			loseOneLife = false;			loseTwoLife = false;						silence = true;						prepareStacks();						addEventListener(Event.ADDED_TO_STAGE, addedToStage, false, 0, true);			addEventListener(Event.ENTER_FRAME, enterFrame);		}				private function enterFrame(e : Event):void 		{				var loading =  int((root.loaderInfo.bytesLoaded / root.loaderInfo.bytesTotal) * 100);			//trace(loading);						var preloader:MovieClip = getChildByName("preLoader") as MovieClip;			var loadLabel = preloader.getChildByName("loadLabel");			loadLabel.text = "Loading: " + loading + "%";						if(root.loaderInfo.bytesLoaded == root.loaderInfo.bytesTotal){				removeEventListener(Event.ENTER_FRAME, enterFrame);								gotoAndStop(31);				showStartScreen();			}		}				private function prepareStacks():void		{			//hazardStack = [15, 16, 17, 18];			var i = 0;			for (i = 2; i <= 31; i++)			{				hazardStack.push(i);			}			shuffleStack(hazardStack);						//fightingStack = [];			//for (i = 12; i <= 45; i++)			//{				//fightingStack.push(i);			//}			//fightingStack = [33,33, 35, 35];			fightingStack = [2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 6, 6, 6];			shuffleStack(fightingStack);						agingStack = [7, 13, 14];			shuffleStack(agingStack);			var agingStackB:Array = [8, 9, 10, 10, 11, 12, 12];			shuffleStack(agingStackB);			for (i = 0; i < agingStackB.length; i++)			{				agingStack.push(agingStackB[i]);			}						for (i = 1; i <= 10; i++)			{				pirateStack.push(i);			}			shuffleStack(pirateStack);		}				private function fadeoutAndRemove(mc:MovieClip):void		{			TweenMax.to(mc, .6, {onComplete: removeChild, onCompleteParams: [mc], alpha: 0});		}				private function fadein(mc:MovieClip):void		{			TweenMax.to(mc, .6, {alpha: 1});		}				private function showStartScreen():void		{			pausePoint = 0;			theBackgroundMusic = new Background() as Sound; 			theBackgroundMusicChannel = theBackgroundMusic.play(0,10);						theStartScreen = new Cover();			addChild(theStartScreen);						var level1Button = theStartScreen.getChildByName("level1Button");			var level2Button = theStartScreen.getChildByName("level2Button");			var level3Button = theStartScreen.getChildByName("level3Button");			var level4Button = theStartScreen.getChildByName("level4Button");			level1Button.addEventListener(MouseEvent.CLICK, level1ButtonClicked, false, 0, true);			level2Button.addEventListener(MouseEvent.CLICK, level2ButtonClicked, false, 0, true);			level3Button.addEventListener(MouseEvent.CLICK, level3ButtonClicked, false, 0, true);			level4Button.addEventListener(MouseEvent.CLICK, level4ButtonClicked, false, 0, true);		}				private function showGameOverScreen():void		{			theGameOverScreen = new GameOver();			theGameOverScreen.alpha = 0;						var scoreLabel = theGameOverScreen.getChildByName("scoreLabel");			var levelLabel = theGameOverScreen.getChildByName("levelLabel");			var fightingPointLabel = theGameOverScreen.getChildByName("fightingPointLabel");			var remainingLifePointLabel = theGameOverScreen.getChildByName("remainingLifePointLabel");			var unbearenHazardPointLabel = theGameOverScreen.getChildByName("unbearenHazardPointLabel");			var agingPointLabel = theGameOverScreen.getChildByName("agingPointLabel");			var defeatedPiratePointLabel = theGameOverScreen.getChildByName("defeatedPiratePointLabel");			var gameOverLabel = theGameOverScreen.getChildByName("gameOverLabel");						if (winTheGame)			{				gameOverLabel.text = "YOU  WIN"								playSound("Cheer");			}			else			{				gameOverLabel.text = "YOU  LOSE";								playSound("CheerLow");			}						levelLabel.text = "Level: " + gameLevel;						var fightingPoint = 0;			var length = fightingDiscardStack.length;			for (var i = 0; i < length; i++)			{				fightingStack.push(fightingDiscardStack.pop());			}			//trace(fightingStack);			for (var j:int = 0; j < fightingStack.length; j++)			{				//Aging card				if ((fightingStack[j] >= 7) && (fightingStack[j] <= 15))				{					fightingPoint -= 5;					//trace("-5 ");				}				else				{					fightingPoint += Cards.fightingValues[fightingStack[j] - 2];					//trace(Cards.fightingValues[fightingStack[j] - 2]);				}			}			fightingPointLabel.text = "Fighting values: " + fightingPoint;						var remainingLifePoint = 0;			if (lifePoint > 0)			{				remainingLifePoint = lifePoint * 5;			}			else			{				lifePoint = 0;			}			remainingLifePointLabel.text = "Remaining life: " + "5 * " + lifePoint;						var unbearenHazardPoint = 0;			length = hazardDiscardStack.length;			for (var k:int = 0; k < length; k++)			{				hazardStack.push(hazardDiscardStack.pop());			}			unbearenHazardPoint -= (hazardStack.length) * 3;			unbearenHazardPointLabel.text = "Unbeaten hazard: " + "-3 * " + hazardStack.length;						var defeatedPiratePoint = pirateDefeatedNum * 15			defeatedPiratePointLabel.text = "Defeated pirate: " + "15 * " + pirateDefeatedNum						var score = fightingPoint + remainingLifePoint + unbearenHazardPoint + defeatedPiratePoint;			scoreLabel.text = "Score: " + score;						addChild(theGameOverScreen);			fadein(theGameOverScreen);						//BAIDU:			//APP.Game.submitScore(score, submitScoreHandler);						//var restartButton = theGameOverScreen.getChildByName("restartButton");			//restartButton.addEventListener(MouseEvent.CLICK, restartButtonClicked, false, 0, true);		}				private function submitScoreHandler(data:Object = null):void {		}				private function restartButtonClicked(e:MouseEvent):void		{			//Reload		}				private function level1ButtonClicked(e:MouseEvent):void		{			gameLevel = 1;						fadeoutAndRemove(theStartScreen);			startPaly();		}				private function level2ButtonClicked(e:MouseEvent):void		{			gameLevel = 2;						fightingStack.push(agingStack.pop());			shuffleStack(fightingStack);						fadeoutAndRemove(theStartScreen);			startPaly();		}				private function level3ButtonClicked(e:MouseEvent):void		{			gameLevel = 3;						agingStack = [7, 13, 14];			shuffleStack(agingStack);			var agingStackB:Array = [8, 9, 10, 10, 11, 12, 12, 15];			shuffleStack(agingStackB);			for (var i = 0; i < agingStackB.length; i++)			{				agingStack.push(agingStackB[i]);			}						fightingStack.push(agingStack.pop());			shuffleStack(fightingStack);						fadeoutAndRemove(theStartScreen);			startPaly();		}				private function level4ButtonClicked(e:MouseEvent):void		{			gameLevel = 4;						agingStack = [7, 13, 14];			shuffleStack(agingStack);			var agingStackB:Array = [8, 9, 10, 10, 11, 12, 12, 15];			shuffleStack(agingStackB);			for (var i = 0; i < agingStackB.length; i++)			{				agingStack.push(agingStackB[i]);			}						fightingStack.push(agingStack.pop());			shuffleStack(fightingStack);						lifePoint = 18;						fadeoutAndRemove(theStartScreen);			startPaly();		}				private function addedToStage(e:Event):void		{		}				private function startPaly():void		{					silence = false;									var stepPanel = getChildByName("stepPanel");			stepPanel.gotoAndStop(1);						var lifePanel = getChildByName("lifePanel");			if (gameLevel == 4)			{				lifePanel.gotoAndStop(18);			}			else			{				lifePanel.gotoAndStop(20);			}						var hazardStackTop:HazardCard = getChildByName("hazardStackTop") as HazardCard;			//hazardStackTop.addEventListener(MouseEvent.CLICK, hazardStackClicked, false, 0, true);			hazardStackPoint = new Point(hazardStackTop.x, hazardStackTop.y);			hazardBasePoint = new Point(hazardStackPoint.x - 55, hazardStackPoint.y + 235);						var fightingStackTop:FightingCard = getChildByName("fightingStackTop") as FightingCard;			fightingStackPoint = new Point(fightingStackTop.x, fightingStackTop.y);			discardBasePoint = new Point(fightingStackTop.x + 185, fightingStackTop.y + 195);			handBasePoint = new Point(fightingStackPoint.x - 55, fightingStackPoint.y + 235);						var doneButton:SimpleButton = getChildByName("doneButton") as SimpleButton;			doneButton.addEventListener(MouseEvent.CLICK, doneButtonClicked, false, 0, true);			doneButtonPoint = new Point(doneButton.x, doneButton.y);			hideDoneButton();						var fightButton:SimpleButton = getChildByName("fightButton") as SimpleButton;			fightButton.addEventListener(MouseEvent.CLICK, fightButtonClicked, false, 0, true);			fightButtonPoint = new Point(fightButton.x, fightButton.y);			hideFightButton();						var pirate1:PirateCard = getChildByName("pirate1") as PirateCard;			pirate1.cardNumber = pirateStack.pop();			pirate1.show();			pirate1.childIndex = getChildIndex(pirate1)			activePirateCard(pirate1);			pirateBasePoint = new Point(pirate1.x, pirate1.y);						var pirate2:PirateCard = getChildByName("pirate2") as PirateCard;			pirate2.cardNumber = pirateStack.pop();			pirate2.show();			pirate2.childIndex = getChildIndex(pirate2)			activePirateCard(pirate2);						var musicButton = getChildByName("musicButton");			musicButton.addEventListener(MouseEvent.CLICK, musicButtonClicked, false, 0, true);						var testButton1 = getChildByName("testButton1");			testButton1.addEventListener(MouseEvent.CLICK, testButton1Clicked, false, 0, true);			var testButton2 = getChildByName("testButton2");			testButton2.addEventListener(MouseEvent.CLICK, testButton2Clicked, false, 0, true);						var testTimer:Timer = new Timer(500, 0); // 0.5 second			testTimer.addEventListener(TimerEvent.TIMER, testTimerClicked);			testTimer.start();						var updateTimer:Timer = new Timer(500, 0); // 0.5 second			updateTimer.addEventListener(TimerEvent.TIMER, updateStackStatus);			updateTimer.start();						dealHazardCards();		}				private function clearHazardPanel():void		{			var stepPanel = getChildByName("stepPanel");			TweenMax.to(stepPanel, .3, {onComplete: prepareRemoveChild, onCompleteParams: [stepPanel], alpha: 0, ease: Quad.easeIn});						var hazardStackTop = getChildByName("hazardStackTop");			TweenMax.to(hazardStackTop, .3, {onComplete: prepareRemoveChild, onCompleteParams: [hazardStackTop], alpha: 0, ease: Quad.easeIn});		}				private function moveToPitateFighting():void		{			clearHazardPanel();			choosePirate();		}			private function getTotalFightingValue():int		{			if (drawnCards.length == 0)			{				return 0;			}						var totalFightingValue = drawnCards[0].fightingValue();						var highest:int = drawnCards[0].fightingValue();			for (var i:int = 1; i < drawnCards.length; i++)			{				totalFightingValue += drawnCards[i].fightingValue();								if (drawnCards[i].fightingValue() > highest)				{					highest = drawnCards[i].fightingValue();				}							}						if (highestValueEqualZero)			{				totalFightingValue -= highest;			}						for (var j:int = 0; j < theDoubelFighitngValue.length; j++)			{				totalFightingValue += theDoubelFighitngValue[j];			}						if (eachCardAddOne)			{				totalFightingValue += drawnCards.length;			}						return totalFightingValue;		}				private function endFighting():void		{			deactiveFightingStackTop();						if (getTotalFightingValue() >= hazardValue)			{				winFighting();			}			else			{				loseFighting();			}		}				private function loseFighting():void		{			valueDifference = hazardValue - getTotalFightingValue();			decreaseLife(valueDifference);			if (loseOneLife) 			{				decreaseLife(1);			}			if (loseTwoLife) 			{				decreaseLife(2);			}						if (!gameEnded) 			{				if (currentPirate != null)				{					prepareGameOver();					gameOver(false);				}				else 				{					giveInstruction("You lose against the hazard");					hazardDiscardStack.push(currentHazard.cardNumber);					removeCard(currentHazard);										destroyCards();				}			}		}				private function winFighting():void		{			var random = Math.floor(Math.random() * 3) + 1;			var soundName = "Laugh" + random;						playSound(soundName);						if (currentPirate != null)			{				giveInstruction("You win against the Pirate!");								pirateDefeatedNum++;				if (loseOneLife) 				{					decreaseLife(1);				}				if (loseTwoLife) 				{					decreaseLife(2);				}												if (!gameEnded) 				{					clearFighting();					if (otherPirate != null)					{						nextPirate();					}					else					{						gameOver(true);					}				}			}			else			{				giveInstruction("You win against the hazard");								discardHazard();				if (loseOneLife) 				{					decreaseLife(1);				}				if (loseTwoLife) 				{					decreaseLife(2);				}								if (!gameEnded) 				{					clearFighting();				}			}		}				private function gameOver(win:Boolean):void		{			winTheGame = win;			showGameOverScreen();		}				private function clearHand():void		{			if (drawnCards.length == 0)			{				return;			}						playSound("ClearHand");						//Discard one card			var theCard = drawnCards[0];						this.drawnCards.splice(drawnCards.indexOf(theCard), 1);			this.fightingDiscardStack.push(theCard.cardNumber);						flipCard(theCard);			TweenMax.to(theCard, .3, {rotation: 90, ease: Quad.easeIn});			//Discard stack top			if (fightingDiscardStack.length == 1)			{				deactiveFightingCard(theCard);				discardTop = theCard;				TweenMax.to(theCard, .6, {x: discardBasePoint.x + 130, y: discardBasePoint.y - 50, ease: Quad.easeIn});			}			else			{				TweenMax.to(theCard, .6, {onComplete: prepareRemoveChild, onCompleteParams: [theCard], x: discardBasePoint.x + 130, y: discardBasePoint.y - 50, ease: Quad.easeIn});			}						//Discard others			for each (var theOtherCard:FightingCard in drawnCards)			{				flipCard(theOtherCard);				TweenMax.to(theOtherCard, .3, {rotation: 90, ease: Quad.easeIn});				TweenMax.to(theOtherCard, .6, {onComplete: prepareRemoveChild, onCompleteParams: [theOtherCard], x: discardBasePoint.x + 130, y: discardBasePoint.y - 50, ease: Quad.easeIn});				this.fightingDiscardStack.push(theOtherCard.cardNumber);			}						drawnCards = [];		}				private function clearFighting():void		{			clearHand();						hazardValue = 0;			valueDifference = 0;			freeCardsNum = 0;			stopAtNum = 0;			origionalDrawnNum = 0;			selectableCardsNum = 0;			reducedTimes = 0;						theDoubelFighitngValue = [];						highestValueEqualZero = false;			choosingCard = false;			exchangedOneCard = false;			oneHazard = false;			loseLastFighting = false;			newCardCostsTwo = false;			halfCardsCount = false;			discardSortCard = false;			loseOneLife = false;			loseTwoLife = false;						currentHazard = null;			effectCard = null;			theTwoHazards = [];			drawnCards = [];			hidedHandCards = [];			handCardsToActive = [];						//giveInstruction("Next hazard");						hideDoneButton();			hideFightButton();			deactiveFightingStackTop();						var theTimer:Timer = new Timer(1500, 1);			theTimer.addEventListener(TimerEvent.TIMER, delayedRemove);			theTimer.start();		}				private function delayedRemove(event:TimerEvent):void		{			for each (var theChild:MovieClip in childrenToRemove)			{				removeChild(theChild);			}			childrenToRemove = [];						if (currentPirate == null)			{				//Start next fighting				dealHazardCards();			}		}				private function hazardStackClicked(e:MouseEvent):void		{			dealHazardCards();		}				private function doneButtonClicked(e:MouseEvent):void		{			hideDoneButton();						playSound("DoneClick");						if (oneHazard)			{				oneHazard = false;				hazardDiscardStack.push(theTwoHazards[0].cardNumber);				removeCard(theTwoHazards[0]);				clearFighting();			}			else if (choosingCard)			{				if (discardSortCard) 				{					discardSortCard = false;					hideDoneButton();										giveInstruction("Choose cards to put back to the stack");				}				else 				{					choosingCard = false;					restoreHand();					showFightButton();				}						}			else if (loseLastFighting)			{				loseLastFighting = false;				clearFighting();			}			else			{			}		}				private function fightButtonClicked(e:MouseEvent):void		{			hideFightButton();			if (currentPirate != null)			{				if (halfCardsCount) 				{					discardToHalf();					return;				}								endPirateFighting();			}			else			{				endFighting();			}		}				private function endPirateFighting():void 		{			deactiveFightingStackTop();						if (getTotalFightingValue() >= hazardValue)			{					winFighting();			}			else 			{				loseFighting();			}		}				private function hideDoneButton():void		{			var doneButton:SimpleButton = getChildByName("doneButton") as SimpleButton;						doneButton.alpha = 0;			doneButton.x = 0;			doneButton.y = 0;			doneButton.width = 1;			doneButton.height = 1;		}				private function showDoneButton():void		{			var doneButton:SimpleButton = getChildByName("doneButton") as SimpleButton;						doneButton.alpha = 1;			doneButton.x = doneButtonPoint.x;			doneButton.y = doneButtonPoint.y;			doneButton.width = 30;			doneButton.height = 30;		}				private function hideFightButton():void		{			var fightButton:SimpleButton = getChildByName("fightButton") as SimpleButton;						fightButton.alpha = 0;			fightButton.x = 0;			fightButton.y = 0;			fightButton.width = 1;			fightButton.height = 1;		}				private function showFightButton():void		{			var fightButton:SimpleButton = getChildByName("fightButton") as SimpleButton;						fightButton.alpha = 1;			fightButton.x = fightButtonPoint.x;			fightButton.y = fightButtonPoint.y;			fightButton.width = 35;			fightButton.height = 35;		}				private function dealHazardCards():void		{			giveInstruction("Choose a hazard");						deactiveFightingStackTop();						if (hazardStack.length <= 0)			{				if (hazardDiscardStack.length == 0)				{					nextStep();										if (step <= 2)					{						dealHazardCards();					}					return;				}								var length = hazardDiscardStack.length;				for (var i = 0; i < length; i++)				{					hazardStack.push(hazardDiscardStack.pop());				}				shuffleStack(hazardStack);								nextStep();								if (step <= 2)				{					showHazarrdStackTop();					dealHazardCards();				}								return;			}			else if (hazardStack.length == 1)			{				playSound("DealHazard");								var topCard3:HazardCard = new HazardCard(step);				topCard3.x = hazardStackPoint.x;				topCard3.y = hazardStackPoint.y;				topCard3.cardNumber = hazardStack.pop();				topCard3.buttonMode = true;								addChild(topCard3);				//BUG: Sometimes get 0 index of child(not -1) if store child index when mouse enter				topCard3.childIndex = getChildIndex(topCard3);								theTwoHazards.push(topCard3);								//Show button for cancle hazard				oneHazard = true;				showDoneButton();								flipCard(topCard3 as Card);				TweenMax.to(topCard3, .5, {onComplete: activeHazardCard, onCompleteParams: [topCard3], x: hazardBasePoint.x + 295, y: hazardBasePoint.y, ease: Quad.easeIn});								hideHazarrdStackTop();			}			else			{				playSound("DealHazard");								var topCard:HazardCard = new HazardCard(step);				topCard.x = hazardStackPoint.x;				topCard.y = hazardStackPoint.y;				topCard.cardNumber = hazardStack.pop();				topCard.buttonMode = true;								addChild(topCard);				topCard.childIndex = getChildIndex(topCard);								flipCard(topCard as Card);				TweenMax.to(topCard, .5, {onComplete: activeHazardCard, onCompleteParams: [topCard], x: hazardBasePoint.x + 230, y: hazardBasePoint.y, ease: Quad.easeIn});								var topCard2:HazardCard = new HazardCard(step);				topCard2.x = hazardStackPoint.x;				topCard2.y = hazardStackPoint.y;				topCard2.cardNumber = hazardStack.pop();				topCard2.buttonMode = true;								addChild(topCard2);				topCard2.childIndex = getChildIndex(topCard2);								if (hazardStack.length <= 0)				{					hideHazarrdStackTop();				}								flipCard(topCard2 as Card);				TweenMax.to(topCard2, .5, {onComplete: activeHazardCard, onCompleteParams: [topCard2], x: hazardBasePoint.x + 230 + 130, y: hazardBasePoint.y, ease: Quad.easeIn});								theTwoHazards.push(topCard);				theTwoHazards.push(topCard2);			}		}				private function choosePirate():void		{			var glow = new GlowFilter();			glow.blurX = 25;			glow.blurY = 25;			glow.color = 0xe86808;			glow.strength = .97;						var pirate1:PirateCard = getChildByName("pirate1") as PirateCard;			pirate1.buttonMode = true;			pirate1.choice = true;			pirate1.filters = [Card.dropShadow, glow];			TweenMax.to(pirate1, .5, {width: 200, height: 113, x: hazardBasePoint.x + 80, y: hazardBasePoint.y + 25, ease: Quad.easeIn});						var pirate2:PirateCard = getChildByName("pirate2") as PirateCard;			pirate2.buttonMode = true;			pirate2.choice = true;			pirate2.filters = [Card.dropShadow, glow];			TweenMax.to(pirate2, .5, {width: 200, height: 113, x: hazardBasePoint.x + 310, y: hazardBasePoint.y + 25, ease: Quad.easeIn});						theTwoHazards.push(pirate1);			theTwoHazards.push(pirate2);						deactiveFightingStackTop();						giveInstruction("Choose a pirate to fight");		}				private function nextPirate():void		{						removeCard(currentPirate);						currentPirate = otherPirate;			otherPirate = null;			var glow = new GlowFilter();			glow.blurX = 25;			glow.blurY = 25;			glow.color = 0xe86808;			glow.strength = .97;			currentPirate.filters = [Card.dropShadow, glow];						TweenMax.to(currentPirate, .5, {width: 200, height: 113, x: hazardStackPoint.x - 100, y: hazardStackPoint.y + 20, ease: Quad.easeIn});						startFightPirate();		}				private function activeHazardCard(theCard:HazardCard)		{			theCard.addEventListener(MouseEvent.CLICK, hazardCardClicked, false, 0, true);			theCard.addEventListener(MouseEvent.MOUSE_OVER, mouseEnter, false, 0, true);			theCard.addEventListener(MouseEvent.MOUSE_OUT, mouseLeave, false, 0, true);		}				private function fightingStackClicked(e:MouseEvent):void		{			dealFightingCard();		}				private function moveStack():void		{			if (discardTop)			{				var theCard = discardTop;				TweenMax.to(theCard, .3, {rotation: 0, ease: Quad.easeIn});				TweenMax.to(theCard, .6, {onComplete: moveStackCompleted, onCompleteParams: [theCard], x: fightingStackPoint.x, y: fightingStackPoint.y, ease: Quad.easeIn});			}		}				private function moveStackCompleted(theCard:Card):void		{			prepareRemoveChild(theCard);						if (fightingStack.length > 0)			{				showFightingStackTop();			}						dealFightingCard();						//Continue drawing other cards			activeFightingStackTop();		}				private function moveStackWithoutDeal():void		{			if (discardTop)			{				var theCard = discardTop;				TweenMax.to(theCard, .3, {rotation: 0, ease: Quad.easeIn});				TweenMax.to(theCard, .6, {onComplete: moveStackWithoutDealCompleted, onCompleteParams: [theCard], x: fightingStackPoint.x, y: fightingStackPoint.y, ease: Quad.easeIn});			}		}				private function moveStackWithoutDealCompleted(theCard:Card):void		{			prepareRemoveChild(theCard);						if (fightingStack.length > 0)			{				showFightingStackTop();			}		}				private function dealFightingCard():void		{			if((fightingDiscardStack.length + fightingStack.length) == 0)			{				deactiveFightingStackTop();				return;			}						dealFightingCardWithoutActive();						var theTimer:Timer = new Timer(500, 1);			theTimer.addEventListener(TimerEvent.TIMER, delayedActive);			theTimer.start();		}				private function shuffleFightingDiscardStack():void		{			if (fightingDiscardStack.length == 0) 			{				deactiveFightingStackTop();				return;			}						var length = fightingDiscardStack.length;			for (var i = 0; i < length; i++)			{				fightingStack.push(fightingDiscardStack.pop());			}			if (agingStack.length > 0)			{				fightingStack.push(agingStack.pop());			}			shuffleStack(fightingStack);		}				private function dealFightingCardWithoutActive():void		{			if((fightingDiscardStack.length + fightingStack.length) == 0)			{				deactiveFightingStackTop();				return;			}						if (fightingStack.length < 1)			{				shuffleFightingDiscardStack();								deactiveFightingStackTop();								//Deal card in sort effect can not delay				if (hidedHandCards.length > 0)				{					moveStackWithoutDeal();					dealFightingCardWithoutActive();				}				else				{					moveStack();				}								return;			}						playSound("Deal");						var theCardNumber = fightingStack.pop();						var topCard:FightingCard = new FightingCard(theCardNumber);			topCard.x = fightingStackPoint.x;			topCard.y = fightingStackPoint.y;						addChild(topCard);			topCard.childIndex = getChildIndex(topCard);						drawnCards.push(topCard);						handCardsToActive.push(topCard);						if (freeCardsNum > 0)			{				freeCardsNum--;			}			else			{				decreaseLife(1);				if (newCardCostsTwo)				{						decreaseLife(1);				}			}						if(gameEnded == false){				if (fightingStack.length == 0)				{					hideFightingStackTop();				}				flipCard(topCard as FightingCard);				arrangeFightingCards();							if (freeCardsNum > 0)				{					giveInstruction(freeCardsNum + " cards free");				}				else				{					giveInstruction("Sacrifice 1 life to draw an additional card");				}			}		}				private function delayedActive(event:TimerEvent):void		{			if (handCardsToActive.length > 0) 			{				activeFightingCard(handCardsToActive.pop());			}						//BUG FIX:			if (fightingStack.length + fightingDiscardStack.length == 0)			{							deactiveFightingStackTop();			}		}				private function hideFightingStackTop():void		{			var fightingStackTop:FightingCard = getChildByName("fightingStackTop") as FightingCard;			fightingStackTop.alpha = 0;		}				private function hideHazarrdStackTop():void		{			var hazardStackTop:HazardCard = getChildByName("hazardStackTop") as HazardCard;			hazardStackTop.alpha = 0;				}				private function showFightingStackTop():void		{			var fightingStackTop:FightingCard = getChildByName("fightingStackTop") as FightingCard;			fightingStackTop.alpha = 1;		}				private function showHazarrdStackTop():void		{			var hazardStackTop:HazardCard = getChildByName("hazardStackTop") as HazardCard;			hazardStackTop.alpha = 1;		}				private function arrangeFightingCards():void		{			var space:int = 30;			var xBase:int = handBasePoint.x;						//Center to fighting card stack			var centerX = handBasePoint.x + 110;						var length:int = drawnCards.length;			var totalLength:int = 110 * length;			if (currentPirate != null)			{				if (totalLength > 770) 				{					totalLength = 770;				}								//Change center				if (length > 5) 				{					centerX -= 20;				}			}			else			{				if (totalLength > 520) 				{					totalLength = 520;				}								if (length > 3) 				{					centerX += 90;				}			}										xBase = centerX - Math.round(totalLength / 2);			// (length - 1) * space + width = totalLength			space = Math.round((totalLength - 100) / (length - 1));						for each (var theCard:FightingCard in drawnCards)			{				var index = drawnCards.indexOf(theCard);				TweenMax.to(theCard, .5, {x: (xBase + index * space), y: handBasePoint.y, ease: Quad.easeIn});			}		}				private function activeFightingCard(theCard:FightingCard)		{			theCard.addEventListener(MouseEvent.CLICK, fightingCardClicked, false, 0, true);			theCard.addEventListener(MouseEvent.MOUSE_OVER, mouseEnter, false, 0, true);			theCard.addEventListener(MouseEvent.MOUSE_OUT, mouseLeave, false, 0, true);						if (theCard.status == "sort")			{							}			else 			{				//Aging card				if ((theCard.cardNumber >= 7) && (theCard.cardNumber <= 15))				{					runCardEffect(theCard);				}			}		}				private function activePirateCard(theCard:PirateCard):void		{			theCard.addEventListener(MouseEvent.CLICK, pirateCardClicked, false, 0, true);			theCard.addEventListener(MouseEvent.MOUSE_OVER, mouseEnter, false, 0, true);			theCard.addEventListener(MouseEvent.MOUSE_OUT, mouseLeave, false, 0, true);		}				//Add button to card		private function mouseEnter(e:MouseEvent):void		{						var card = e.target;						if (e.target is Card)			{				//BUG FIX:				//card.childIndex = getChildIndex(card);				//trace("Store: " + card.childIndex);								//if (card.childIndex + 1 > this.numChildren - 1) 				//{					//setChildIndex(card, this.numChildren - 1);				//}				//else 				//{					//setChildIndex(card, card.childIndex + 1);				//}								setChildIndex(card, this.numChildren - 1);				//trace("Enter: " + getChildIndex(card));								getDiscription(e.target as Card);			}						if (e.target is HazardCard)			{				//If do not have child				if (card.numChildren == 1)				{														//Add buttom					var theButton2 = new RotateButton();					card.addChild(theButton2);					theButton2.x = -50;					if (card.isRotated)					{						theButton2.y = 110;					}					else					{						theButton2.y = 210;					}										var theButton3 = new ZoomButton();					card.addChild(theButton3);					theButton3.x = 0;					if (card.isRotated)					{						theButton3.y = 110;					}					else					{						theButton3.y = 210;					}				}			}			else if (e.target is FightingCard)			{				//If do not have child				if (card.numChildren == 1)				{						//Add buttom					var theButton = new ZoomButton();					e.target.addChild(theButton);					theButton.x = -85;					theButton.y = 150;				}			}			else if (e.target is PirateCard)			{								//If do not have child				if (card.numChildren == 1)				{					//Add buttom					var theButton4 = new ZoomButton();					e.target.addChild(theButton4);					theButton4.x = 25;					theButton4.y = 65;				}				giveInstruction(card.pirateEffect());			}					}				private function restoreChildIndex(theCard:Card)		{			if (theCard.childIndex > numChildren - 1) 			{				setChildIndex(theCard, numChildren - 1);				//trace("Out number Restore: " + getChildIndex(theCard));			}			else 			{				setChildIndex(theCard, theCard.childIndex);				//trace("Restore: " + getChildIndex(theCard));			}		}				private function mouseLeave(e:MouseEvent):void		{						var card = e.target;						if (e.target is HazardCard)			{				//If have child				if (card.numChildren > 1)				{					//If not enter child					if (!((e.localX > (card.getChildAt(1).x - 5)) && (e.localX < (card.getChildAt(1).x + card.getChildAt(1).width + 5)) && (e.localY > (card.getChildAt(1).y - 5)) && (e.localY < (card.getChildAt(1).y + card.getChildAt(1).height + 5)) || (e.localX > (card.getChildAt(2).x - 5)) && (e.localX < (card.getChildAt(2).x + card.getChildAt(2).width + 5)) && (e.localY > (card.getChildAt(2).y - 5)) && (e.localY < (card.getChildAt(2).y + card.getChildAt(1).height + 5))))					{						if (!card.isZoomed)						{							card.removeChildAt(1);							card.removeChildAt(1);													restoreChildIndex(card);						}					}				}				else				{					if (!card.isZoomed)					{						restoreChildIndex(card);					}				}			}						else if (e.target is FightingCard || e.target is PirateCard)			{								//If have child				if (card.numChildren > 1)				{					//If not enter child					if (!((e.localX > (card.getChildAt(1).x - 5)) && (e.localX < (card.getChildAt(1).x + card.getChildAt(1).width + 5)) && (e.localY > (card.getChildAt(1).y - 5)) && (e.localY < (card.getChildAt(1).y + card.getChildAt(1).height + 5))))					{						if (!card.isZoomed)						{							card.removeChildAt(1);							restoreChildIndex(card);						}					}				}				else				{					if (!card.isZoomed)					{						restoreChildIndex(card);					}				}			}						if (e.target is SimpleButton)			{							}		}				private function mouseMove(e:MouseEvent):void		{			//if (e.target is FightingCard)			//{			//if (e.target.isZoomed)			//{			//return;			//}			//if (e.localX > 60)			//{			//mouseLeave(e);			//}			//}		}				private function pirateCardClicked(e:MouseEvent):void		{			if (e.target is SimpleButton)			{				zoomIn(e.currentTarget as PirateCard);			}			else			{				var theCard:PirateCard = e.target as PirateCard;								if (theCard.isZoomed)				{					TweenMax.to(theCard, .5, {x: theCard.origionalX, y: theCard.y + 150, z: 0});					theCard.isZoomed = false;				}								if (theCard.choice)				{					if (theTwoHazards[0] == theCard)					{						otherPirate = theTwoHazards[1];						currentPirate = theTwoHazards[0];					}					else					{						otherPirate = theTwoHazards[0];						currentPirate = theTwoHazards[1];					}										otherPirate.buttonMode = false;					otherPirate.choice = false;					otherPirate.filters = [Card.dropShadow];					TweenMax.to(otherPirate, .5, {width: 150, height: 85, x: pirateBasePoint.x, y: pirateBasePoint.y, ease: Quad.easeIn});										currentPirate.buttonMode = false;					currentPirate.choice = false;					TweenMax.to(currentPirate, .5, {x: hazardStackPoint.x - 100, y: hazardStackPoint.y + 20, ease: Quad.easeIn});										startFightPirate();				}			}		}				private function startFightPirate():void		{			hazardValue = currentPirate.pirateValue();			freeCardsNum = currentPirate.pirateFreeCards();						runPirateEffect(currentPirate);						showFightButton();						activeFightingStackTop();						dealFightingCard();		}				private function runPirateEffect(theCard:PirateCard):void		{			var cardNumber = theCard.cardNumber;			switch (cardNumber)			{				case 1: 					countAgingCards();					break;				case 4: 					newCardCostsTwo = true;					break;				case 5: 					fightAgainstTheRest();					break;				case 7: 					halfCardsCount = true;					break;				case 10: 					eachCardAddOne = true;					break;				default: 			}		}				private function countAgingCards():void 		{			var result = 0;			var theCardNumber = 0;			for (var i:int = 0; i < fightingStack.length; i++)			{				theCardNumber = fightingStack[i];				if ((theCardNumber >= 7) && (theCardNumber <= 15))				{					result += 2;				}			}			for (var j:int = 0; j < fightingDiscardStack.length; j++)			{				theCardNumber = fightingDiscardStack[j];				if ((theCardNumber >= 7) && (theCardNumber <= 15))				{					result += 2;				}			}						hazardValue = result;		}				private function fightAgainstTheRest():void		{			var totalHazardValue = 0;			var totalCardNum = 0;			var index = 2;			for (var i:int = 0; i < hazardStack.length; i++)			{				index = hazardStack[i] - 2;				totalCardNum += Cards.hazardValues[4 * index];				totalHazardValue += Cards.hazardValues[4 * index + 3 - 2];			}			hazardValue = totalHazardValue;			freeCardsNum = totalCardNum;						//trace(hazardValue);			//trace(freeCardsNum);		}				private function cancleCardEffect(theCard:FightingCard):void 		{				//Cancel aging effect				if (theCard.cardNumber == 10) 				{					highestValueEqualZero = false;				}									//Cancel aging effect				if (theCard.cardNumber == 11) 				{					freeCardsNum += stopAtNum;					stopAtNum = 0;										if (freeCardsNum > 0)					{						giveInstruction(freeCardsNum + " cards free");					}					else					{						giveInstruction("Sacrifice 1 life to draw an additional card");					}				}								//Cancel double value				if (theCard.isDoubled) 				{					var value = 0 - theCard.fightingValue();					theDoubelFighitngValue.push(value);				}								//Cancel lose life				if (theCard.cardNumber == 7) 				{					loseTwoLife = false;				}								//Cancel lose life				if (theCard.cardNumber == 8) 				{					loseOneLife = false;				}		}				private function fightingCardClicked(e:MouseEvent):void		{			if (e.target is SimpleButton)			{				zoomIn(e.currentTarget as FightingCard);			}			else			{				var theCard:FightingCard = e.target as FightingCard;								if (theCard.isZoomed)				{					TweenMax.to(theCard, .5, {x: theCard.origionalX, y: theCard.y + 150, z: 0});					theCard.isZoomed = false;				}								if (theCard.status == "usable")				{					playSound("Effect");										theCard.status = "used";					theCard.previousStatus = "used";					theCard.buttonMode = false;					theCard.filters = [Card.dropShadow, Card.usedGlow];										deactiveFightingStackTop();										runCardEffect(theCard);				}				else if (theCard.status == "sort")				{					playSound("FightingCardClick");										if (discardSortCard) 					{						discardSortCard = false;												discardHand(theCard);												sortCards.pop();												hideDoneButton();												giveInstruction("Choose cards to put back to the stack");					}					else 					{						fightingStack.push(theCard.cardNumber);												sortCards.pop();											flipCard(theCard as Card);						TweenMax.to(theCard, .5, {onComplete: sortCardCompleted, onCompleteParams: [theCard], x: fightingStackPoint.x, y: fightingStackPoint.y, ease: Quad.easeIn});											if (sortCards.length == 0)						{							restoreHandCards();						}					}				}				else if (theCard.status == "destroy")				{					playSound("FightingCardClick");					cancleCardEffect(theCard);										this.drawnCards.splice(drawnCards.indexOf(theCard), 1);					removedCards.push(theCard);					removeCard(theCard);					restoreHand();					arrangeFightingCards();				}				else if (theCard.status == "discardToHalf")				{					playSound("FightingCardClick");					if (drawnCards.length > ((origionalDrawnNum + 1) / 2))					{												discardHand(theCard);						selectableCardsNum--;																		if (((drawnCards.length) <= ((origionalDrawnNum + 1) / 2)) || (selectableCardsNum == 0))						{							origionalDrawnNum = 0;							selectableCardsNum = 0;							restoreHand();							//													endPirateFighting();						}					}					else					{						origionalDrawnNum = 0;						selectableCardsNum = 0;						restoreHand();												//						endPirateFighting();					}				}				else if (theCard.status == "lose")				{					playSound("FightingCardClick");					this.drawnCards.splice(drawnCards.indexOf(theCard), 1);					removedCards.push(theCard);										removeCard(theCard);										if ((theCard.cardNumber >= 7) && (theCard.cardNumber <= 15))					{						valueDifference -= 2;					}					else					{						valueDifference -= 1;					}										if ((valueDifference <= 0) || (drawnCards.length == 0))					{						loseLastFighting = false;						hideDoneButton();												//BUG: Timer always click after the remove card animation						var theTimer:Timer = new Timer(100, 1);						theTimer.addEventListener(TimerEvent.TIMER, delayedClear);						theTimer.start();					}					else					{						//Deactive aging cards when valueDifference is less then 2						var haveChoice = false;						for each (var theCard2:FightingCard in drawnCards)						{							if ((theCard2.cardNumber >= 7) && (theCard2.cardNumber <= 15) && (valueDifference < 2))							{								theCard2.filters = [Card.dropShadow];								theCard2.buttonMode = false;								theCard2.status = "deactive";							}							else 							{								haveChoice = true;							}						}												if (haveChoice == false) 						{							loseLastFighting = false;							hideDoneButton();														//BUG: Timer always click after the remove card animation							var theTimer2:Timer = new Timer(100, 1);							theTimer2.addEventListener(TimerEvent.TIMER, delayedClear);							theTimer2.start();						}					}										arrangeFightingCards();				}				else if (theCard.status == "exchange")				{					playSound("FightingCardClick");										discardHand(theCard);										restoreHand();										freeCardsNum++;					dealFightingCard();				}				else if (theCard.status == "exchangeTwo")				{					playSound("FightingCardClick");										discardHand(theCard);										freeCardsNum++;					dealFightingCard();										var newCard = drawnCards[drawnCards.length - 1];					newCard.filters = [Card.dropShadow, Card.chooseGlow];					newCard.buttonMode = true;					newCard.previousStatus = newCard.status;					newCard.status = "exchangeTwo";										if (exchangedOneCard)					{						//Show button for end fighting						exchangedOneCard = false;						choosingCard = false;						showFightButton();												hideDoneButton();												restoreHand();					}					else					{						exchangedOneCard = true;					}				}				else if (theCard.status == "below")				{					playSound("FightingCardClick");										//Discard					cancleCardEffect(theCard);					var index = drawnCards.indexOf(theCard);					this.drawnCards.splice(drawnCards.indexOf(theCard), 1);										if (fightingStack.length == 0)					{						shuffleFightingDiscardStack();						moveStackWithoutDeal();					}										fightingStack.unshift(theCard.cardNumber);										flipCard(theCard);					TweenMax.to(theCard, .5, {onComplete: prepareRemoveChild, onCompleteParams: [theCard], x: fightingStackPoint.x, y: fightingStackPoint.y, ease: Quad.easeIn});										arrangeFightingCards();										restoreHand();										if (currentPirate == null) 					{						if (index <= currentHazard.hazardCardNumber() - 1)						{							freeCardsNum++;							dealFightingCard();						}					}					else 					{						if (index <= currentPirate.pirateFreeCards() - 1)						{							freeCardsNum++;							dealFightingCard();						}					}				}				else if (theCard.status == "double")				{					playSound("FightingCardClick");										theCard.isDoubled = true;					theDoubelFighitngValue.push(theCard.fightingValue());					restoreHand();				}				else if (theCard.status == "copy")				{					playSound("FightingCardClick");										restoreHand();					//					runCardEffect(theCard);				}				else				{					//trace(theCard.status);				}			}		}				private function sortCardCompleted(theCard:FightingCard):void		{			if (fightingStack.length == 1)			{				showFightingStackTop();			}			prepareRemoveChild(theCard);		}				private function runCardEffect(theCard:FightingCard):void		{			effectCard = theCard;						switch (theCard.cardNumber)			{				case 5: 					plusTwoLife();					break;				case 7: 					loseTwoLife = true;					break;				case 8: 					loseOneLife = true;					break;				case 10: 					highestCardEqualZero();					break;				case 11: 					stopDrawing();					break;				case 18: 					exchangeOneCard();					break;				case 19: 					sortThreeCards();					break;				case 20: 					plusOneCard();					break;				case 21: 					destroyOneCard();					break;				case 22: 					doubleOneCard();					break;				case 23: 					plusLife();					break;				case 24: 					exchangeOneCard();					break;				case 25: 					sortThreeCards();					break;				case 26: 					destroyOneCard();					break;				case 27: 					plusOneCard();					break;				case 30: 					plusLife();					break;				case 31: 					plusLife();					break;				case 32: 					belowThePile();					break;				case 33: 					doubleOneCard();					break;				case 34: 					destroyOneCard();					break;				case 35: 					copyOneCard();					break;				case 36: 					exchangeTwoCards();					break;				case 37: 					exchangeTwoCards();					break;				case 38: 					plusTwoCards();					break;				case 39: 					plusTwoCards();					break;				case 40: 					plusLife();					break;				case 41: 					plusLife();					break;				case 42: 					copyOneCard();					break;				case 43: 					destroyOneCard();					break;				case 44: 					belowThePile();					break;				case 45: 					reduceOneStep();					break;				default: 			}		}				private function delayedClear(event:TimerEvent):void		{			clearFighting();		}				private function restoreHand():void		{			for each (var theHandCard:FightingCard in drawnCards)			{				theHandCard.status = theHandCard.previousStatus;								if (theHandCard.status == "used")				{					theHandCard.buttonMode = false;					theHandCard.filters = [Card.dropShadow, Card.usedGlow];				}				else if (theHandCard.status == "usable")				{					theHandCard.buttonMode = true;					theHandCard.filters = [Card.dropShadow, Card.usableGlow];				}				else				{					theHandCard.buttonMode = false;					theHandCard.filters = [Card.dropShadow];				}			}						activeFightingStackTop();			showFightButton();						effectCard = null;						if (freeCardsNum > 0)			{				giveInstruction(freeCardsNum + " cards free");			}			else			{				giveInstruction("Sacrifice 1 life to draw an additional card");			}		}				private function hazardCardClicked(e:MouseEvent):void		{			if (e.target is ZoomButton)			{				zoomIn(e.currentTarget as HazardCard);			}			else if (e.target is RotateButton)			{				rotate(e.currentTarget as HazardCard);			}			else			{				if (currentHazard != null)				{					return;				}								var theCard:HazardCard = e.target as HazardCard;								if (theCard.isZoomed)				{					TweenMax.to(theCard, .5, {x: theCard.x - 150, y: theCard.y + 150, z: 0});					theCard.isZoomed = false;				}								if (theCard.numChildren == 3)				{					var rotateButton = theCard.getChildAt(1);					var zoomButton = theCard.getChildAt(2);				}								if (theCard.isRotated)				{					TweenMax.to(theCard, .5, {rotation: 0});					TweenMax.to(theCard, .5, {y: theCard.y - 180});										if (theCard.numChildren == 3)					{						rotateButton.y = 200;						zoomButton.y = 200;					}					theCard.isRotated = false;				}								if (theTwoHazards[0] == theCard)				{					if (theTwoHazards.length == 2)					{						hazardDiscardStack.push(theTwoHazards[1].cardNumber);						removeCard(theTwoHazards[1] as Card);					}					currentHazard = theTwoHazards[0];				}				else				{					hazardDiscardStack.push(theTwoHazards[0].cardNumber);					removeCard(theTwoHazards[0] as Card);					currentHazard = theTwoHazards[1];				}								theCard.buttonMode = false;								theTwoHazards.pop();				if (theTwoHazards.length > 0)				{					theTwoHazards.pop();				}								freeCardsNum = theCard.hazardCardNumber();				hazardValue = theCard.hazardValue();								//				hideDoneButton();								//Show button for end fighting				oneHazard = false;				showFightButton();								//Play hazard Sound				if ((currentHazard.cardNumber >= 2) && (currentHazard.cardNumber <= 3))				{					playSound("Cannibal");				}				else if ((currentHazard.cardNumber >= 4) && (currentHazard.cardNumber <= 7)) 				{					playSound("Beast");				}				else if ((currentHazard.cardNumber >= 8) && (currentHazard.cardNumber <= 13)) 				{					playSound("ExploreDeep");				}				else if ((currentHazard.cardNumber >= 14) && (currentHazard.cardNumber <= 21)) 				{					playSound("Explore");				}					else if ((currentHazard.cardNumber >= 22) && (currentHazard.cardNumber <= 31)) 				{					playSound("Boat");				}												//Start fighting				TweenMax.to(theCard, .3, {onComplete: dealFightingCard, x: hazardBasePoint.x + 55, y: hazardBasePoint.y, ease: Quad.easeIn});				if (freeCardsNum > 0)				{					giveInstruction(freeCardsNum + " cards free");				}				else				{					giveInstruction("Sacrifice 1 life to draw an additional card");				}								activeFightingStackTop();			}		}				private function rotate(theCard:HazardCard):void		{			playSound("CardFlip");						if (theCard.numChildren == 3)			{				var rotateButton = theCard.getChildAt(1);				var zoomButton = theCard.getChildAt(2);			}						if (theCard.isRotated)			{				TweenMax.to(theCard, .5, {rotation: 0});				TweenMax.to(theCard, .5, {y: theCard.y - 180});								if (theCard.numChildren == 3)				{					rotateButton.y = 200;					zoomButton.y = 200;				}				theCard.isRotated = false;			}			else			{				TweenMax.to(theCard, .5, {rotation: 180});				TweenMax.to(theCard, .5, {y: theCard.y + 180});								if (theCard.numChildren == 3)				{					rotateButton.y = 120;					zoomButton.y = 120;				}				theCard.isRotated = true;			}		}				private function zoomIn(theCard:Card):void		{			playSound("CardFlip");						if (!theCard.isZoomed)			{				theCard.origionalX = theCard.x;			}						if (theCard is HazardCard)			{				if (theCard.isZoomed)				{					TweenMax.to(theCard, .5, {x: theCard.origionalX, y: theCard.y + 150, z: 0});					theCard.isZoomed = false;				}				else				{					TweenMax.to(theCard, .5, {x: 350, y: theCard.y - 150, z: -250});					theCard.isZoomed = true;				}							}			else if (theCard is FightingCard)			{				if (theCard.isZoomed)				{					TweenMax.to(theCard, .5, {x: theCard.origionalX, y: theCard.y + 150, z: 0});					theCard.isZoomed = false;				}				else				{					TweenMax.to(theCard, .5, {x: 400, y: theCard.y - 150, z: -250});					theCard.isZoomed = true;				}			}			else if (theCard is PirateCard)			{				//Change reference type to use child class 				var thePirateCard = theCard as PirateCard;				if (thePirateCard.choice)				{										if (theCard.isZoomed)					{						TweenMax.to(theCard, .5, {x: theCard.origionalX, y: theCard.y + 120, z: 0});						theCard.isZoomed = false;					}					else					{										playSound("Pirate");						TweenMax.to(theCard, .5, {x: 320, y: theCard.y - 120, z: -300});						theCard.isZoomed = true;					}									}				else				{					if (theCard == currentPirate)					{						if (theCard.isZoomed)						{							TweenMax.to(theCard, .5, {x: theCard.origionalX, y: theCard.y - 50, z: 0});							theCard.isZoomed = false;						}						else						{											playSound("Pirate");							TweenMax.to(theCard, .5, {x: 190, y: theCard.y + 50, z: -300});							theCard.isZoomed = true;						}					}					else					{												if (theCard.isZoomed)						{							TweenMax.to(theCard, .5, {x: theCard.origionalX, y: theCard.y - 150, z: 0});							theCard.isZoomed = false;						}						else						{											playSound("Pirate");							TweenMax.to(theCard, .5, {x: 250, y: theCard.y + 150, z: -400});							theCard.isZoomed = true;						}					}				}			}		}				private function discardHand(theCard:FightingCard):void		{			if (theCard.status == "sort")			{						}			else 			{				cancleCardEffect(theCard);			}						this.drawnCards.splice(drawnCards.indexOf(theCard), 1);			this.fightingDiscardStack.push(theCard.cardNumber);						flipCard(theCard);			TweenMax.to(theCard, .3, {rotation: 90, ease: Quad.easeIn});			if (fightingDiscardStack.length == 1)			{				discardTop = theCard;				deactiveFightingCard(theCard);				TweenMax.to(theCard, .6, {x: discardBasePoint.x + 130, y: discardBasePoint.y - 50, ease: Quad.easeIn});			}			else			{				TweenMax.to(theCard, .6, {onComplete: prepareRemoveChild, onCompleteParams: [theCard], x: discardBasePoint.x + 130, y: discardBasePoint.y - 50, ease: Quad.easeIn});			}						arrangeFightingCards();		}				private function deactiveFightingCard(theCard:FightingCard):void		{			theCard.filters = [Card.discardDropShadow];			theCard.buttonMode = false;			theCard.removeEventListener(MouseEvent.CLICK, fightingCardClicked);			theCard.removeEventListener(MouseEvent.MOUSE_OVER, mouseEnter);			theCard.removeEventListener(MouseEvent.MOUSE_OUT, mouseLeave);			if (theCard.numChildren > 1)			{				theCard.removeChildAt(1);			}		}				private function deactiveFightingStackTop():void		{			var fightingStackTop:FightingCard = getChildByName("fightingStackTop") as FightingCard;			fightingStackTop.buttonMode = false;			fightingStackTop.removeEventListener(MouseEvent.CLICK, fightingStackClicked);		}				private function activeFightingStackTop():void		{			var fightingStackTop:FightingCard = getChildByName("fightingStackTop") as FightingCard;			fightingStackTop.buttonMode = true;			fightingStackTop.addEventListener(MouseEvent.CLICK, fightingStackClicked, false, 0, true);		}				private function discardHazard():void		{			var theCard:HazardCard = currentHazard;						var theFightingCardNumber = currentHazard.cardNumber + 14;			fightingDiscardStack.push(theFightingCardNumber);						flipCard(theCard);			TweenMax.to(theCard, .3, {rotation: 90, ease: Quad.easeIn});						if (fightingDiscardStack.length == 1)			{				deactiveHazardCard(theCard);				discardTop = theCard;								TweenMax.to(theCard, .6, {x: discardBasePoint.x + 130, y: discardBasePoint.y - 50, ease: Quad.easeIn});			}			else			{				TweenMax.to(theCard, .6, {onComplete: prepareRemoveChild, onCompleteParams: [theCard], x: discardBasePoint.x + 130, y: discardBasePoint.y - 50, ease: Quad.easeIn});			}						currentHazard = null;		}				private function deactiveHazardCard(theCard:HazardCard):void		{			theCard.filters = [Card.discardDropShadow];			theCard.buttonMode = false;			theCard.removeEventListener(MouseEvent.CLICK, hazardCardClicked);			theCard.removeEventListener(MouseEvent.MOUSE_OVER, mouseEnter);			theCard.removeEventListener(MouseEvent.MOUSE_OUT, mouseLeave);						if (theCard.numChildren > 2)			{				theCard.removeChildAt(1);				theCard.removeChildAt(1);			}		}				private function removeCard(theCard:Card):void		{			//Add to remove list immediately			childrenToRemove.push(theCard);						setChildIndex(theCard, this.numChildren - 1);			TweenMax.to(theCard, .5, {onComplete: prepareRemoveChild, onCompleteParams: [theCard], x: theCard.x + 10, y: theCard.y - 120, z: -100, rotationY: -45, rotationX: -70});			TweenMax.to(theCard, .3, {alpha: 0, delay: .1, ease: Quad.easeIn});		}				private function prepareRemoveChild(theChild:DisplayObject):void		{			if (childrenToRemove.indexOf(theChild) < 0)			{				childrenToRemove.push(theChild);			}			theChild.width = 1;			theChild.height = 1;			theChild.x = 1;			theChild.y = 1;			theChild.alpha = 0;		}				private function flipCard(card:Card):void		{			if (card.isBack)			{				TweenMax.to(card, .3, {onComplete: card.flip, rotationY: 90, ease: Quad.easeIn});				TweenMax.to(card, .3, {rotationY: 0, ease: Quad.easeOut, delay: .3});			}			else			{				TweenMax.to(card, .3, {onComplete: card.flip, rotationY: -90, ease: Quad.easeIn});				TweenMax.to(card, .3, {rotationY: 0, ease: Quad.easeOut, delay: .3});			}		}				private function hideFightingCard(theCard:FightingCard):void		{			theCard.width = 1;			theCard.height = 1;						theCard.removeEventListener(MouseEvent.CLICK, fightingCardClicked);		}				private function showFightingCard(theCard:FightingCard):void		{			theCard.width = 100;			theCard.height = 180;						theCard.addEventListener(MouseEvent.CLICK, fightingCardClicked, false, 0, true);		}				private function getDiscription(theCard:Card):void		{			var discription = getChildByName("discription");			discription.text = theCard.getDiscription();			//			var stackLable7 = getChildByName("stackLable7");			stackLable7.text = "The Card: " + theCard.cardNumber.toString() + " theCard.chidIndex: " + theCard.childIndex.toString() + " ChildIndex: " + getChildIndex(theCard).toString() + " status: " + theCard.status + " - " + theCard.previousStatus;		}				private function getFightingStatus():void		{			var fightingStatus = getChildByName("fightingStatus");			var theText = "Hazard: " + hazardValue + " " + "VS" + " " + getTotalFightingValue();			fightingStatus.text = theText;		}				private function nextStep():void		{			playSound("NewStep");			step++;			if (step > 2)			{				moveToPitateFighting();			}			else			{				var stepPanel = getChildByName("stepPanel");				stepPanel.gotoAndStop(step + 1);			}		}				private function decreaseLife(num:int):void		{			if (this.lifePoint < 0) 			{				return;			}						var lifePanel = getChildByName("lifePanel");						if (num > 0)			{				playHurtEffect();								var random = Math.floor(Math.random() * 3) + 1;				var soundName = "Hurt" + random;								playSound(soundName);			}			else			{				playRecoverEffect();			}						this.lifePoint = lifePoint - num;						if (gameLevel != 4)			{				if (this.lifePoint >= 22)				{					this.lifePoint = 22;					lifePanel.gotoAndStop(22);				}				else if (this.lifePoint >= 1)				{					lifePanel.gotoAndStop(this.lifePoint);				}				else if (this.lifePoint < 0)				{					lifePanel.gotoAndStop(23);					prepareGameOver();					gameOver(false);				}				else				{					lifePanel.gotoAndStop(23);				}			}			else			{				if (this.lifePoint >= 20)				{					this.lifePoint = 20;					lifePanel.gotoAndStop(20);				}				else if (this.lifePoint >= 1)				{					lifePanel.gotoAndStop(this.lifePoint);				}				else if (this.lifePoint < 0)				{					lifePanel.gotoAndStop(23);					prepareGameOver();					gameOver(false);				}				else				{					lifePanel.gotoAndStop(23);				}			}				}				private function prepareGameOver():void 		{			gameEnded = true;						if (currentHazard != null) 			{				 hazardDiscardStack.push(currentHazard.cardNumber);				 trace("prepareGameOver pushed hazard " + currentHazard.cardNumber);			}			for each (var theHandCard:FightingCard in drawnCards)			{				fightingDiscardStack.push(theHandCard.cardNumber);				trace("prepareGameOver pushed hand " + theHandCard.cardNumber);			}		}				private function shuffleStack(theStack:Array):void		{			if (theStack.length == 0)			{				return;			}						playSound("ShuffleStack");						var i, swap, tmp:uint;						for (i = theStack.length - 1; i > 0; i--)			{				swap = Math.floor(Math.random() * i);				tmp = theStack[i];				theStack[i] = theStack[swap];				theStack[swap] = tmp;			}		}				//		//Effects		//				private function plusLife():void		{			playSound("Eat");						decreaseLife(-1);			activeFightingStackTop();		}				private function plusTwoLife():void		{			playSound("Eat");			decreaseLife(-2);			activeFightingStackTop();		}				private function highestCardEqualZero():void		{			highestValueEqualZero = true;			activeFightingStackTop();		}				private function stopDrawing():void		{			var index = drawnCards.indexOf(effectCard);			if (currentPirate == null) 			{				if (index > currentHazard.hazardCardNumber() - 1)				{					return;				}			}			else 			{				if (index > currentPirate.pirateFreeCards() - 1)				{					return;				}			}						//Store the left number			stopAtNum = freeCardsNum;			freeCardsNum = 0;						effectCard = null;						activeFightingStackTop();						giveInstruction("Stop drawing");		}				private function exchangeOneCard():void		{			if (drawnCards.length == 1)			{				giveInstruction("You can only exchange other cards");								restoreEffectCard();				activeFightingStackTop();				return;			}						giveInstruction("Choose one card to exchange");						hideFightButton();						for each (var theCard:FightingCard in drawnCards)			{				if ((theCard == effectCard))				{					continue;				}								theCard.filters = [Card.dropShadow, Card.chooseGlow];				theCard.buttonMode = true;				theCard.previousStatus = theCard.status;				theCard.status = "exchange";			}		}				private function exchangeTwoCards():void		{			if (drawnCards.length == 1)			{				giveInstruction("You can only exchange other cards");								restoreEffectCard();				activeFightingStackTop();				return;			}						giveInstruction("Choose cards to exchange");						hideFightButton();			choosingCard = true;			showDoneButton();						for each (var theCard:FightingCard in drawnCards)			{				if ((theCard == effectCard))				{					continue;				}				theCard.filters = [Card.dropShadow, Card.chooseGlow];				theCard.buttonMode = true;				theCard.previousStatus = theCard.status;				theCard.status = "exchangeTwo";			}		}				private function hideHandCards():void		{			for each (var theDrawnCard:FightingCard in drawnCards)			{				hidedHandCards.push(theDrawnCard);				TweenMax.to(theDrawnCard, .3, {onComplete: hideFightingCard, onCompleteParams: [theDrawnCard], alpha: 0, ease: Quad.easeIn});			}			drawnCards = [];			//trace("Hided: " + hidedHandCards.length);		}				private function restoreHandCards():void		{			effectCard = null;			drawnCards = [];						for each (var theHidedCard:FightingCard in hidedHandCards)			{				drawnCards.push(theHidedCard);				showFightingCard(theHidedCard);				TweenMax.to(theHidedCard, .3, {alpha: 1, ease: Quad.easeIn});			}						hidedHandCards = [];						activeFightingStackTop();						showFightButton();						//trace("Restored: " + drawnCards.length);			if (freeCardsNum > 0)			{				giveInstruction(freeCardsNum + " cards free");			}			else			{				giveInstruction("Sacrifice 1 life to draw an additional card");			}		}				private function sortThreeCards():void		{			if (fightingStack.length + fightingDiscardStack.length < 3) 			{				giveInstruction("No enough cards");								restoreEffectCard();				activeFightingStackTop();				return;			}						hideHandCards();									discardSortCard = true;						hideFightButton();			choosingCard = true;			showDoneButton();						freeCardsNum += 3;			for (var i = 0; i < 3; i++)			{				dealFightingCardWithoutActive();												var theCard = drawnCards[drawnCards.length - 1];				theCard.status = "sort";				theCard.filters = [Card.dropShadow, Card.chooseGlow];				theCard.buttonMode = true;								//Do not active aging effect				activeFightingCard(theCard);				sortCards.push(theCard);			}						giveInstruction("You can choose one to discard");		}				private function plusOneCard():void		{			freeCardsNum++;			activeFightingStackTop();						giveInstruction(freeCardsNum + " cards free");		}				private function plusTwoCards():void		{			freeCardsNum++;			freeCardsNum++;			activeFightingStackTop();						giveInstruction(freeCardsNum + " cards free");		}				private function destroyOneCard():void		{			if (drawnCards.length == 1)			{				giveInstruction("You can only destroy other cards");								restoreEffectCard();				activeFightingStackTop();				return;			}						giveInstruction("Choose one card to destory");						hideFightButton();						for each (var theCard:FightingCard in drawnCards)			{				if ((theCard == effectCard))				{					continue;				}				theCard.filters = [Card.dropShadow, Card.chooseGlow];				theCard.buttonMode = true;				theCard.previousStatus = theCard.status;				theCard.status = "destroy";			}		}				private function unchooseCard(theCard:FightingCard):void		{			theCard.filters = [Card.dropShadow];			theCard.buttonMode = false;			theCard.previousStatus = theCard.status;			theCard.status = "deactive";		}					private function restoreEffectCard():void		{			var theCard = effectCard;			if (theCard == null)			{				return;			}			theCard.status = "usable";			theCard.previousStatus = "usable";			theCard.buttonMode = true;			theCard.filters = [Card.dropShadow, Card.usableGlow];		}				private function destroyCards():void		{			giveInstruction("Choose cards to destroy");						hideFightButton();			loseLastFighting = true;			showDoneButton();						var haveChoice:Boolean = false;						for each (var theCard:FightingCard in drawnCards)			{				if ((theCard.cardNumber >= 7) && (theCard.cardNumber <= 15) && (valueDifference < 2))				{					unchooseCard(theCard);				}				else				{					theCard.filters = [Card.dropShadow, Card.chooseGlow];					theCard.buttonMode = true;					theCard.previousStatus = theCard.status;					theCard.status = "lose";										haveChoice = true;				}			}						//Clear fighting if have no choice			if (haveChoice == false)			{				loseLastFighting = false;				hideDoneButton();								clearFighting();			}		}				private function discardToHalf():void		{			if (drawnCards.length == 0)			{				return;			}						origionalDrawnNum = drawnCards.length;						var haveChoice:Boolean = false;						for each (var theCard:FightingCard in drawnCards)			{				if ((theCard.cardNumber >= 7) && (theCard.cardNumber <= 15))				{					unchooseCard(theCard);				}				else				{					theCard.filters = [Card.dropShadow, Card.chooseGlow];					theCard.buttonMode = true;					theCard.previousStatus = theCard.status;					theCard.status = "discardToHalf";										selectableCardsNum++;					haveChoice = true;				}			}									//Clear fighting if have no choice			if (haveChoice == false)			{				endPirateFighting();							}						giveInstruction("Discard to half of fighting cards");		}				private function copyOneCard():void		{			if (drawnCards.length == 1)			{				giveInstruction("You can only copy other cards");				restoreEffectCard();				activeFightingStackTop();				return;			}						giveInstruction("Choose one card to copy the effect");						hideFightButton();						var haveChoice:Boolean = false;						for each (var theCard:FightingCard in drawnCards)			{				if ((theCard == effectCard))				{					continue;				}				if ((theCard.fightingEffect() != " ") && (!((theCard.cardNumber >= 7) && (theCard.cardNumber <= 15)))&&(theCard.cardNumber!=42)&&(theCard.cardNumber!= 35))				{					theCard.previousStatus = theCard.status;					theCard.status = "copy";					theCard.buttonMode = true;					theCard.filters = [Card.dropShadow, Card.chooseGlow];										haveChoice = true;				}				else				{					unchooseCard(theCard);				}			}						//Restore cards if have no choice			if (haveChoice == false)			{				restoreEffectCard();				restoreHand();				giveInstruction("Have no choice");			}		}				private function doubleOneCard():void		{			if (drawnCards.length == 1)			{				giveInstruction("You can only double other cards");				restoreEffectCard();				activeFightingStackTop();				return;			}						giveInstruction("Choose one card to double the fight value");						hideFightButton();						var haveChoice:Boolean = false;						for each (var theCard:FightingCard in drawnCards)			{				if ((theCard == effectCard))				{					continue;				}								if (theCard.isDoubled)				{					unchooseCard(theCard);				}				else				{					theCard.filters = [Card.dropShadow, Card.chooseGlow];					theCard.buttonMode = true;					theCard.previousStatus = theCard.status;					theCard.status = "double";					haveChoice = true;				}			}						//Restore cards if have no choice			if (haveChoice == false)			{				restoreEffectCard();				restoreHand();				giveInstruction("Have no choice");			}		}				private function belowThePile():void		{			if (drawnCards.length == 1)			{				giveInstruction("You can only choose other cards");				restoreEffectCard();				activeFightingStackTop();				return;			}						giveInstruction("Choose one card to put below the plie");						hideFightButton();						for each (var theCard:FightingCard in drawnCards)			{				if ((theCard == effectCard))				{					continue;				}								theCard.filters = [Card.dropShadow, Card.chooseGlow];				theCard.buttonMode = true;				theCard.previousStatus = theCard.status;				theCard.status = "below";			}		}				private function reduceOneStep():void		{			if (currentPirate != null)			{				giveInstruction("You can not use this to pirate");				restoreEffectCard();				activeFightingStackTop();				return;			}						if (step - reducedTimes <= 0) 			{				giveInstruction("Now is the lowest step");				restoreEffectCard();				activeFightingStackTop();				return;			}			else			{				giveInstruction("Step reduced");								reducedTimes++;								var index = currentHazard.cardNumber - 2;				if (step - reducedTimes > 0) 				{					hazardValue = Cards.hazardValues[4 * index + 3 - (step - reducedTimes)];				}				else 				{					hazardValue = Cards.hazardValues[4 * index + 3 - (0)];				}			}						activeFightingStackTop();		}				//		//		//				private function playSound(theSoundName:String):void 		{			if (!silence) 			{				var ClassReference:Class = getDefinitionByName(theSoundName) as Class;					var mySound:Sound = new ClassReference() as Sound; 				mySound.play();			}		}		private function musicButtonClicked(e:MouseEvent):void		{			if (silence) 			{				silence = false;				theBackgroundMusicChannel = theBackgroundMusic.play(pausePoint,10);			}			else 			{				silence = true;				pausePoint = theBackgroundMusicChannel.position;				theBackgroundMusicChannel.stop();			}		}		//		//		//				private function testButton1Clicked(e:MouseEvent):void		{			//clearHazardPanel();			//choosePirate();			plusTwoLife();			//theDoubelFighitngValue.push(+1);			//countAgingCards();			//newCardCostsTwo = true;			//nextPirate();			//playSound("ButtonClick");		}				private function testButton2Clicked(e:MouseEvent):void		{			//decreaseLife(1);						//discardHand(drawnCards[0]);						//plusLife();						//sortThreeCards();						//destroyOneCard();						//exchangeOneCard();						//belowThePile();						//reduceOneStep();						//copyOneCard();						//exchangeTwoCards();						//doubleOneCard();						//discardHazard();						//clearHand();						//clearFighting();						//discardHazard();						//discardHand(drawnCards[0]);								//winFighting();						//valueDifference = 1;			//destroyCards();						//discardHand(drawnCards[0]);						//trace(hazardStack);			//trace(hazardDiscardStack);			//						//discardHand(drawnCards[0]);						//choosePirate();						//fightAgainstTheRest();						//nextPirate();						//discardToHalf();						//addChild(targetEffect);			//			//targetEffect.play();						//playRecoverEffect();			//playHurtEffect();			//showGameOverScreen();						//moveToPitateFighting();						//plusTwoLife();						//discardToHalf();						//halfCardsCount = true;			//theDoubelFighitngValue.push(-5);						theDoubelFighitngValue.push(2);		}				private function playHurtEffect():void		{			var randomRotate = Math.floor(Math.random() * 360);			theHurtEffect.rotation = randomRotate;			addChild(theHurtEffect);			theHurtEffect.gotoAndPlay(1);		}				private function playRecoverEffect():void		{			addChild(theRecoverEffect);			theRecoverEffect.gotoAndPlay(1);		}				private function hurtPlayEnd():void		{			theHurtEffect.gotoAndStop(1);			removeChild(theHurtEffect);		}				private function recoverPlayEnd():void		{			theRecoverEffect.gotoAndStop(1);			removeChild(theRecoverEffect);		}				private function getStackStatus(theStack:Array):String		{			var result = "";			for (var i:int = 0; i < theStack.length; i++)			{				result += theStack[i].toString();				result += " ";			}			return result;		}				private function getHandStatus(theHand:Array):String		{			var result = "";			for (var i:int = 0; i < theHand.length; i++)			{				result += theHand[i].cardNumber.toString();				result += " ";			}			return result;		}				private function giveInstruction(theString:String):void		{			var instruction = getChildByName("instruction");			instruction.text = theString;		}				private function testTimerClicked(event:TimerEvent):void		{			getFightingStatus();						var stackLable1 = getChildByName("stackLable1");			stackLable1.text = "Fighting: " + getStackStatus(fightingStack);			var stackLable2 = getChildByName("stackLable2");			stackLable2.text = "Fighting Discard : " + getStackStatus(fightingDiscardStack);			var stackLable6 = getChildByName("stackLable6");			stackLable6.text = "Aging: " + getStackStatus(agingStack);			var stackLable3 = getChildByName("stackLable3");			stackLable3.text = "Hazard: " + getStackStatus(hazardStack);			var stackLable4 = getChildByName("stackLable4");			stackLable4.text = "Hazard Discard: " + getStackStatus(hazardDiscardStack);			var stackLable5 = getChildByName("stackLable5");			stackLable5.text = "Hand: " + getHandStatus(drawnCards);			var stackLable8 = getChildByName("stackLable8");			stackLable8.text = "Removed: " + getHandStatus(removedCards);		}				private function updateStackStatus(event:TimerEvent):void		{			var hazardLabel = getChildByName("hazardLabel");			hazardLabel.text = hazardStack.length;			var fightingLabel = getChildByName("fightingLabel");			fightingLabel.text = fightingStack.length;			var discardLabel = getChildByName("discardLabel");			discardLabel.text = fightingDiscardStack.length;			var agingLabel = getChildByName("agingLabel");			agingLabel.text = agingStack.length;		}	}}